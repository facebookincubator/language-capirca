#
# Copyright (c) 2017-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant 
# of patent rights can be found in the PATENTS file in the same directory.
#
'scopeName': 'source.capirca'
'name': 'Capirca'
'fileTypes': [
  'pol',
  'svc',
  'net',
  'inc'
]
'patterns': [
  {
    # Number sign comments
    'begin': '(^[ \\t]+)?(?=#(?!include))'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.capirca'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.capirca'
        'end': '\\n'
        'name': 'comment.line.number-sign.capirca'
      }
    ]
  }
  # comment:: or file-comment lines
  {
    'match': '^(?:\\s+)?((?:file-)?comment\\:\\: ?.*)'
    'name': 'comment.line.number.capirca'
  }
  # pound include statements
  {
    'begin': '#include'
    'end': '\\n'
    'name': 'string.quoted.capirca'
  }
  # double colon keywords
  {
    'match': '^(?:\\s+)?((?:protocol(?:-except)?|ether-type|precedence|fragment-offset|loss-priority|traffic-type|routing-instance|option|action|counter|apply-groups|source-interface|logging|(?:source|destination)-(?:port|address|exclude|prefix)|target|flexible-match-range|icmp-type|verbatim|platform-exclude|platform|packet-length|qos|policer|application))(::)'
    'captures':
      '1':
        'name': 'support.function.capirca'
      '2':
        'name': 'keyword.operator.capirca'
  }
  # option:: constants
  {
    'match': '(?<=option::)\\s*(established|tcp-established|sample|initial|rst|(first|is)-fragment)'
    'captures':
      '1':
        'name': 'constant.language.capirca'
    'name': ''
  }
  # action:: constants that are acceptance (deny/rejects get shown as invalid below)
  {
    'match': '(?<=action::)\\s*(accept|next)'
    'captures':
      '1':
        'name': 'constant.language.capirca'
    'name': ''
  }
  # target:: / platform:: constants
  {
    'match': '(?<=target::|platform::|platform-exclude::)\\s*(arista|aruba|brocade|cisco(?:-?xr|-xe|asa)?|gce|ipset|(?:ip|nf)tables|juniper(?:qfx)?|nsxv|panfw|paloalto|pcap|speedway|srx(?:lo)?|vshield|windows(?:_advfirewall|_ipsec)?)'
    'captures':
      '1':
        'name': 'constant.language.capirca'
    'name': ''
  }
  # logging:: constants
  {
    'match': '(?<=logging::)\\s*(true)'
    'captures':
      '1':
        'name': 'constant.language.capirca'
    'name': ''
  }
  # protocol:: constants - matches any number 0-255, or specific named protocols that capirca accepts
  {
    'match': '(?<=protocol::)\\s*((\\d\\d?|1\\d\\d|2[0-5][0-5]|ah|egp|esp|fragment|ggp|gre|icmp(?:v6)?|igmp|igp|ipencap|ipip|ipv6(?:-frag|-nonxt|-opts|-route)?|l2tp|ospf|pim|rdp|rsvp|sctp|tcp|udp|vrrp)\\s*)+(?:\\n|#|})'
    'captures':
      '0':
        'name': 'constant.language.capirca'
    'name': ''
  }
  # user defined names, network/port groups in terms, counter names, etc
  {
    'match': '(?<=counter::|qos::|policer::|source-port::|destination-port::|source-address::|destination-address::|source-prefix::|destination-prefix::|source-exclude::|destination-exclude::)\\s*([\\w\\-\\.\\s]+)(?=\\n|#|})'
    'captures':
      '1':
        'name': 'variable.language.capirca'
    'name': ''
  }
  # term names
  {
    'begin': '^\\s*(term)\\s+([\\w\\-\\.]+) ?'
    'beginCaptures':
      '1':
        'name': 'storage.type.capirca'
      '2':
        'name': 'entity.name.function.capirca'
    'end': '{'
    'name': 'meta.function.capirca'
  }
  # headers
  {
    'begin': '^\\s*(header)(\\s+)?'
    'beginCaptures':
      '1':
        'name': 'storage.type.capirca'
    'end': '{'
    'name': 'meta.function.capirca'
  }
  # make deny statements pop as invalid
  {
    'match': '(?<=action::)(?:\\s*)(deny|reject(-with-tcp-rst)?)'
    'captures':
      '1':
        'name': 'invalid.illegal.capirca'
    'name': ''
  }
  # make expiration statements pop as invalid
  {
    'match': '\\b(expiration)(::)'
    'captures':
      '1':
        'name': 'invalid.illegal.capirca'
      '2':
        'name': 'keyword.operator.capirca'
    'name': ''
  }
  # Service and network definitions
  {
    'match': '^\\s*([\\w\\-\\.]+)\\s*(=)'
    'captures':
      '1':
        'name': 'variable.language.capirca'
      '2':
        'name': 'keyword.operator.capirca'
    'name': 'meta.function.capirca'
  }
  # IPv4 addresses
  {
    'match': '\\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))([/]\\d{1,2})?\\b'
    'name': 'constant.numeric.integer.long.octal.capirca'
  }
  # IPv6 addresses
  {
    'comment': 'This will not fully validate the structure of the IP, so some invalid IPv6 addresses might be false positives.',
    'name': 'constant.numeric.integer.long.octal.capirca',
    'match': '(?:\\b)((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}(::|:\\b|[/]\\d+|))|(?!\\3\\4)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?){4})([/]\\d{1,3})?(?:\\s)'
  }
]
